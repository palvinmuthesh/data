{"version":3,"sources":["Components/Editor/Button.js","Components/Editor/EditField.js","Components/Notes/NoteCard.js","Components/Notes/Notes.js","Components/SideBar/Toggle.js","Components/SideBar/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["button","width","height","fontSize","borderRadius","backgroundColor","color","border","cursor","Button","props","text","handleClick","react_default","a","createElement","react","style","onClick","textArea","padding","background","outline","EditField","state","note","title","date","Date","toDateString","handleChange","e","_this","setState","Object","objectSpread","defineProperty","target","name","value","handleSave","this","className","onChange","placeholder","Editor_Button","Component","NoteCard","id","handleNotesClick","_this2","_this$props","handleNoteDelete","Notes","noteItems","map","Notes_NoteCard","key","Toggle","type","handleToggle","SideBar","handleClearNoteClick","deleteAllNotes","handleNewNote","createNewNote","SideBar_Toggle","NoteApp","count","notes","untitledCount","isEditing","isNightMode","handleFieldChange","handleStorageChange","newNotes","newNote","_this$state","concat","toConsumableArray","localStorage","setItem","noteIndex","findIndex","splice","JSON","stringify","getNotes","items","getItem","length","parse","getCount","window","confirm","changeNightMode","nightMode","stopPropagation","notePosition","_this$state2","Sidebar","Components_Notes_Notes","Editor_EditField","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c71228dc.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n\n\nconst button = {\n    width: \"100px\",\n    height: \"40px\",\n    fontSize: \"16px\",\n    borderRadius: \"4px\",\n    backgroundColor: \"#2C666E\",\n    color: \"white\",\n    border: \"0\",\n    cursor: \"pointer\"\n} \n\nconst Button = (props) => {\n    const { text, handleClick } = props;\n    return (\n        <Fragment>\n            <button style={button}onClick={handleClick}>{text}</button>\n        </Fragment>\n    )\n}\n\nexport default Button;","import React, { Component } from 'react';\nimport Button from './Button';\n\nconst textArea = {\n    width: \"100%\",\n    border:  \"0\",\n    height: \"calc(100vh - 200px)\",\n    padding: \"20px\",\n    background: \"inherit\",\n    color: \"white\",\n    fontSize: \"16px\",\n    outline: \"none\"\n}\n\nclass EditField extends Component {\n    state = {\n        note : {\n            title: \"\",\n            text: \"\",\n            date: (new Date()).toDateString()\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState ({\n            note: {\n                ...this.state.note,\n                [e.target.name]: e.target.value\n            } \n        })\n    }\n    handleSave = () => {\n        if(this.state.note !== \"\") {\n            this.props.handleSave(this.state.note)\n        }\n        this.setState({note: {\n            title: \"\",\n            text: \"\"\n        }})\n    }\n\n    render() {\n\n        const { note } = this.props\n        return (\n            <div className=\"edit-field\">\n                <h3 className=\"notes-header\">Write Note </h3>\n                <input className=\"title-input\" name=\"title\" onChange={this.props.handleChange} value={note.title} placeholder=\"Title\"/>\n                <textarea style={textArea} name=\"text\" onChange={this.props.handleChange} placeholder=\"Write a note\" value={note.text}></textarea>\n                <Button text=\"Save\" handleClick={this.props.handleSave}/>\n            </div>\n        )\n    }\n}\n\nexport default EditField;","import React, { Component } from 'react';\n\n\nclass NoteCard extends Component {\n\n    handleClick = (id, text, title) => {\n        this.props.handleNotesClick(id, text, title)\n    }\n    \n    render() {\n        const { note, id,  handleNoteDelete } = this.props;\n        return (\n            <div onClick={() =>this.handleClick(id, note.text, note.title)} className=\"note\">\n                <h4>{note.title}</h4>\n                <p>{note.text}</p>\n                <small>{note.date}</small>\n                <button className=\"button-delete\" onClick={(e) => handleNoteDelete(note.id, e)}>ðŸ—‘</button>\n            </div>\n        )  \n    }\n         \n}\n\nexport default NoteCard;\n","import React, { Component } from 'react';\nimport NoteCard from './NoteCard';\n\nclass Notes extends Component {\n    render() {\n        const { noteItems, handleNotesClick, handleNoteDelete } = this.props;\n        return (\n            <div>\n                <h3 className=\"notes-header\">All Notes </h3>\n                { noteItems && noteItems.map(note => {\n                    return (\n                        <NoteCard \n                            key={note.id} \n                            id={note.id} \n                            handleNotesClick={handleNotesClick} \n                            note={note} \n                            handleNoteDelete={handleNoteDelete}\n                        />\n                    )\n                })}\n            </div>\n        )\n    }\n}\n\nexport default Notes;","import React from 'react';\nimport \"./Toggle.css\"\n\n\nfunction Toggle (props) {\n\n    const handleToggle = () => {\n        props.handleToggle();\n    }\n    return (\n        <label className=\"switch\">\n            <input type=\"checkbox\" onClick={handleToggle}/>\n            <span className=\"slider round\"></span>\n        </label>\n    )\n}\n\nexport default Toggle;\n\n","import React, { Component, Fragment }from 'react';\nimport Toggle from \"./Toggle\"\n\nclass SideBar extends Component {\n    handleClearNoteClick = () => {\n        this.props.deleteAllNotes();\n    }\n\n    handleNewNote = () => {\n        this.props.createNewNote();\n    }\n\n    render() {\n        const { handleToggle } = this.props;\n        return (\n            <Fragment>\n                <Toggle handleToggle={handleToggle} />\n                <ul className=\"list\">\n                    <li key=\"new\" onClick={this.handleNewNote} style={{cursor: \"pointer\"}} className=\"list-item\">New Note</li>\n                    <li key=\"clear\" onClick={this.handleClearNoteClick} style={{cursor: \"pointer\"}}>Clear Notes</li>\n                </ul>\n            </Fragment>\n        )\n    }\n}\n\nexport default SideBar;\n\n","import React, { Component } from \"react\";\nimport EditField from \"./Components/Editor/EditField\";\nimport Notes from \"./Components/Notes/Notes\";\nimport SideBar from \"./Components/SideBar/Sidebar\";\nimport \"./App.css\";\n\n\n//Todo : Button for adding new note; button for clearing all notes, delete particular note, fix time problem\n\nclass NoteApp extends Component {\n\tstate = {\n\t\tcount: 1,\n\t\tnotes: [], \n\t\tuntitledCount: 0,\n\t\tisEditing: false,\n\t\tisNightMode: true,\n\t\tnote: {\n\t\t\tid: 0,\n\t\t\ttitle: \"\",\n\t\t\ttext: \"\",\n\t\t\tdate: \"\"\n\t\t}\n\t};\n\n\tcomponentDidMount() {\n\t\tconst notes = this.getNotes();\n\t\tconst count = this.getCount();\n\t\tthis.setState({\n\t\t\tcount,\n\t\t\tnotes: notes\n\t\t});\n\t\t// window.addEventListener('storage', this.handleStorageChange )\n\t}\n\n\thandleFieldChange = (e) => {\n        this.setState ({\n            note: {\n                ...this.state.note,\n                [e.target.name]: e.target.value\n            } \n        })\n    }\n\n\thandleStorageChange = () => {\n\t\tconst newNote = this.state.note;\n\t\tlet { untitledCount, count, isEditing, notes } = this.state;\n\t\tlet newNotes;\n\n\t\tnewNote.date =  (new Date()).toDateString();\n\n\t\tif (!isEditing) {\n\t\t\tif (newNote.title === \"\") {\n\t\t\t\tnewNote.title = \"Untitled\";\n\t\t\t\tthis.setState({\n\t\t\t\t\tuntitledCount: untitledCount++,\n\t\t\t\t\t\tnote: { \n\t\t\t\t\t\t\ttitle: \"\",\n\t\t\t\t\t\t\ttext: \"\",\n\t\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\t\n\t\t\tnewNote.id = count;\n\t\t\tcount++;\n\n\t\t\tnewNotes = [...notes, newNote]\n\t\t\tlocalStorage.setItem('count', count)\n\t\t}\n\n\t\tif(isEditing) {\n\t\t\tconst noteIndex = notes.findIndex(note => note.id === newNote.id)\n\t\t\tnotes.splice(noteIndex, 1, newNote);\n\t\t\tnewNotes = notes;\n\n\t\t\tthis.setState({\n\t\t\t\tisEditing: false\n\t\t\t})\n\t\t}\n\n\t\tthis.setState({\n\t\t\tcount,\n\t\t\tnotes: newNotes,\n\t\t\tnote : {\n\t\t\t\ttitle: \"\",\n\t\t\t\ttext: \"\"\n\t\t\t}\n\t\t});\n\t\tlocalStorage.setItem('note', JSON.stringify(newNotes))\n\n\t};\n\n\tgetNotes = () => {\n\t\tlet items = localStorage.getItem('note')\n\t\titems = items || []\n\t\tif (items.length !== 0) {\n\t\t\treturn JSON.parse([items]);\n\t\t}\n\t\telse {\n\t\t\treturn []\n\t\t}\n\t};\n\n\tgetCount = () => {\n\t\tconst count = localStorage.getItem('count') ? localStorage.getItem('count') : 1 ;\n\t\treturn count;\n\t}\n\n\tdeleteAllNotes = () => {\n\t\tconst clear = window.confirm(\"Are you sure you want to delete all notes?\");\n\t\tif (clear) {\n\t\t\tlocalStorage.setItem(\"note\", []);\n\t\t\tlocalStorage.setItem(\"count\", 1)\n\t\t\tthis.setState({\n\t\t\t\tnotes: [],\n\t\t\t\tcount: 1\n\t\t\t})\n\t\t}\n\t}\n\n\tcreateNewNote = () => {\n\t\tthis.setState({\n\t\t\tnote : {\n\t\t\t\tid: 0,\n\t\t\t\ttitle: \"\",\n\t\t\t\ttext: \"\",\n\t\t\t\tdate: (new Date()).toDateString()\n\t\t\t}\n\t\t})\n\t}\n\n\tchangeNightMode = () => {\n\n\t\tconst nightMode =  this.state.isNightMode === true ? false : true;\n\n\t\tthis.setState({\n\t\t\tisNightMode: nightMode\n\t\t})\n\t}\n\n\thandleNotesClick = (id, notes, title) => {\n\t\tthis.setState({\n\t\t\tisEditing: true,\n\t\t\tnote : {\n\t\t\t\tid,\n\t\t\t\ttitle: title || \"\",\n\t\t\t\ttext: notes || \"\"\n\t\t\t}\n\t\t})\n\t}\n\n\thandleNoteDelete = (id, e) => {\n\t\te.stopPropagation();\n\t\tlet newNotes = this.state.notes;\n\t\tconst notePosition = newNotes.findIndex(note => note.id === id) \n\t\tnewNotes.splice(notePosition, 1);\n\t\tthis.setState({\n\t\t\tnotes : newNotes\n\t\t})\n\t\tlocalStorage.setItem(\"note\", JSON.stringify(newNotes));\n\t}\n\n\trender() {\n\t\tconst { notes, isNightMode} = this.state;\n\t\treturn (\n\t\t\t<div className={`App ${!isNightMode ? \"light-mode\" : \"\"}`}>\n\t\t\t\t<div className=\"side-bar\">\n\t\t\t\t\t<SideBar \n\t\t\t\t\t\thandleToggle={this.changeNightMode}\n\t\t\t\t\t\tcreateNewNote={this.createNewNote}\n\t\t\t\t\t\tdeleteAllNotes={this.deleteAllNotes}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"notes\">\n\t\t\t\t\t<Notes \n\t\t\t\t\t\tnoteItems={notes}\n\t\t\t\t\t\thandleNotesClick={this.handleNotesClick} \n\t\t\t\t\t\thandleNoteDelete={this.handleNoteDelete}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"edit-field\">\n\t\t\t\t\t<EditField \n\t\t\t\t\t\thandleSave={this.handleStorageChange} \n\t\t\t\t\t\tnote={this.state.note} \n\t\t\t\t\t\thandleChange={this.handleFieldChange}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default NoteApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport NoteApp from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<NoteApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}